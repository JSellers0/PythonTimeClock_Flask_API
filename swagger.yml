swagger: "2.0"
info:
  description: This is the swagger file that goes with our server code
  version: "1.0.0"
  title: Swagger Rest Tutorial - realpython.com/flask-connexion-rest-api
consumes:
  - application/json
produces:
  - application/json

basePath: /api

paths:
  /projects:
    get:
      operationId: projects.read_all
      tags:
        - Projects
      summary: Read the entire set of projects, sorted by project name
      description: Read the entire set of projects, sorted by project name
      responses:
        200:
          description: Successfully read project set operation
          schema:
            type: array
            items:
              properties:
                projectid:
                  type: string
                  description: ID of the project
                project_name:
                  type: string
                  description: Name of the project
    post:
      operationId: projects.create
      tags:
        - Projects
      summary: Create a project
      description: Create a new project
      parameters:
        - name: project
          in: body
          description: Client to create
          required: True
          schema:
            type: object
            properties:
              project_name:
                type: string
                description: Name of the project to create
      responses:
        201:
          description: Successfully created project
          schema:
            properties:
              projectid:
                type: string
                description: ID of the project
              project_name:
                type: string
                description: Name of the project
  /projects/{projectid}:
    get:
      operationId: projects.read_one
      tags:
        - Projects
      summary: Read one project
      description: Read one project
      parameters:
        - name: projectid
          in: path
          description: ID of the project to get
          type: integer
          required: True
      responses:
        200:
          description: Successfully read project from projects data operation
          schema:
            type: object
            properties:
              projectid:
                type: string
                description: ID of the project
              project_name:
                type: string
                description: Name of the project

  /tasks:
    get:
      operationId: tasks.read_all
      tags:
        - Clients
      summary: Read the entire set of tasks, sorted by task name
      description: Read the entire set of tasks, sorted by task name
      responses:
        200:
          description: Successfully read task set operation
          schema:
            type: array
            items:
              properties:
                taskid:
                  type: string
                  description: ID of the task
                task_name:
                  type: string
                  description: Name of the task
    post:
      operationId: tasks.create
      tags:
        - Clients
      summary: Create a task
      description: Create a new task
      parameters:
        - name: task
          in: body
          description: Client to create
          required: True
          schema:
            type: object
            properties:
              task_name:
                type: string
                description: Name of the task to create
      responses:
        201:
          description: Successfully created task
          schema:
            properties:
              taskid:
                type: string
                description: ID of the task
              task_name:
                type: string
                description: Name of the task
  /tasks/{taskid}:
    get:
      operationId: tasks.read_one
      tags:
        - Clients
      summary: Read one task
      description: Read one task
      parameters:
        - name: taskid
          in: path
          description: ID of the task to get
          type: integer
          required: True
      responses:
        200:
          description: Successfully read task from tasks data operation
          schema:
            type: object
            properties:
              taskid:
                type: string
                description: ID of the task
              task_name:
                type: string
                description: Name of the task

  /notes:
    get:
      operationId: notes.read_all
      tags:
        - Clients
      summary: Read the entire set of notes, sorted by note name
      description: Read the entire set of notes, sorted by note name
      responses:
        200:
          description: Successfully read note set operation
          schema:
            type: array
            items:
              properties:
                noteid:
                  type: string
                  description: ID of the note
                note_name:
                  type: string
                  description: Name of the note
    post:
      operationId: notes.create
      tags:
        - Clients
      summary: Create a note
      description: Create a new note
      parameters:
        - name: note
          in: body
          description: Client to create
          required: True
          schema:
            type: object
            properties:
              note_name:
                type: string
                description: Name of the note to create
      responses:
        201:
          description: Successfully created note
          schema:
            properties:
              noteid:
                type: string
                description: ID of the note
              note_name:
                type: string
                description: Name of the note
  /notes/{noteid}:
    get:
      operationId: notes.read_one
      tags:
        - Clients
      summary: Read one note
      description: Read one note
      parameters:
        - name: noteid
          in: path
          description: ID of the note to get
          type: integer
          required: True
      responses:
        200:
          description: Successfully read note from notes data operation
          schema:
            type: object
            properties:
              noteid:
                type: string
                description: ID of the note
              note_name:
                type: string
                description: Name of the note

  /users:
    post:
      operationId: users.create
      tags:
        - Users
      summary: Create a user
      description: Create a new user
      parameters:
        - name: user
          in: body
          description: User to create
          required: True
          schema:
            type: object
            properties:
              user_name:
                type: string
                description: Name of the user to create
              email:
                type: string
                description: Email address of the user to create
              encoded_password:
                type: string
                description: Encoded password of the user to create
      responses:
        201:
          description: Successfully created user
          schema:
            properties:
              userid:
                type: string
                description: ID of the user
              user_name:
                type: string
                description: Username of the user
              email:
                type: string
                description: Email address of the user
  /users/{userid}:
    put:
      operationId: users.update
      tags:
        - Users
      summary: Update user
      description: Update a user's information
      parameters:
        - name: userid
          in: path
          description: ID of the user to update
          type: integer
          required: True
        - name: user
          in: body
          description: user object with current or new data
          required: True
          schema:
            type: object
            properties:
              user_name:
                type: string
                description: User's current or new username
              email:
                type: string
                description: User's current or new email address
              encoded_password:
                type: string
                description: User's new encoded password
      responses:
        200:
          description: Successfully updated user
  /users/name:
    post:
      operationId: users.read_name
      tags:
        - Users
      summary: Read one user by Username
      description: Return a user that matches username and password submitted for verification
      parameters:
        - name: user
          in: body
          description: User to search
          required: True
          schema:
            type: object
            properties:
              user_name:
                type: string
                description: Name of the user to search
              password:
                type: string
                description: User password submitted to application for verification
      responses:
        200:
          description: Successfully found user with Username
          schema:
            properties:
              userid:
                type: string
                description: ID of the user
              user_name:
                type: string
                description: Username of the user
              email:
                type: string
                description: Email address of the user
  /users/email:
    get:
      operationId: users.read_email
      tags:
        - Users
      summary: Verify user email for password recovery
      description: Submit an email address to initiate password recovery procedure.
      parameters:
        - name: user
          in: body
          description: User object with email address to query
          required: True
          schema:
            type: object
            properties:
              email:
                type: string
                description: Email address to query
      responses:
        200:
          description: Successfully found user with email address
          schema:
            properties:
              userid:
                type: string
                description: ID of the user
              user_name:
                type: string
                description: Username of the user
              email:
                type: string
                description: Email address of the user

  /timelog:
    get:
      operationId: timelog.read_user_rows
      tags:
        - Timelog
      summary: Read Users Timelog
      description: Returns all timelog rows for the User's ID
      parameters:
        - name: userid
          in: body
          description: ID of a User with Timelog rows
          required: True
          schema:
            type: object
            properties:
              userid:
                type: string
                description: ID of the User to search
      responses:
        200:
          description: Successfully read timelog rows for user
          schema:
            type: object
            properties: 
              timelogid:
                type: integer
                description: ID of the timelog row
              userid:
                type: string
                description: ID of the user to which the rows belong
              projectid:
                type: string
                description: ID of the project tracked by the row
              taskid:
                type: string
                description: ID of the task tracked by the row
              noteid:
                type: string
                description: ID of the note traked by the row
              start:
                type: string
                description: Timestamp of the start of timing the row
              stop:
                type: string
                description: Timestamp of the stop of timing the row or None if no stop time.
    post:
      operationId: timelog.create
      tags:
        - Timelog
      summary: Create a Timelog row
      description: Create a Timelog row for the UserID
      parameters:
        - name: timelog
          in: body
          description: timelog row to create
          required: True
          schema:
            type: object
            properties:
              userid:
                type: string
                description: ID of the user to which the rows belong
              taskid:
                type: string
                description: ID of the task tracked by the row
              projectid:
                type: string
                description: ID of the project tracked by the row
              noteid:
                type: string
                description: ID of the note tracked by the row
              start:
                type: string
                description: Timestamp of the start of timing the row
              stop:
                type: string
                description: Timestamp of the stop of timing the row or None if no stop time.
      responses:
        201:
          description: Timelog row created successfully
          schema:
            properties:
              timelogid:
                type: string
                description: ID of the timelog row created
              userid:
                type: string
                description: ID of the user to which the rows belong
              taskid:
                type: string
                description: ID of the task tracked by the row
              projectid:
                type: string
                description: ID of the project tracked by the row
              noteid:
                type: string
                description: ID of the note tracked by the row
              start:
                type: string
                description: Timestamp of the start of timing the row
              stop:
                type: string
                description: Timestamp of the stop of timing the row or None if no stop time.
  /timelog/daterange:
    get:
      operationId: timelog.read_daterange
      tags:
        - Timelog
      summary: Get Date-bound User Rows
      description: Get Timelog rows for a User between a range of dates
      parameters:
        - in: query
          name: userid
          type: integer
          description: ID of the user to search
          required: True
        - in: query
          name: range_begin
          type: string
          description: Beginning of the range of dates to search
          required: True
        - in: query
          name: range_end
          type: string
          description: End of the range of dates to search
          required: True
      responses:
        200:
          description: Successfully read User rows between dates provided.
          schema:
            properties:
              userid:
                type: integer
                description: ID of the user to which the rows belong
              taskid:
                type: integer
                description: ID of the task tracked by the row
              projectid:
                type: integer
                description: ID of the project tracked by the row
              start:
                type: string
                description: Timestamp of the start of timing the row
              stop:
                type: string
                description: Timestamp of the stop of timing the row or None if no stop time.
  /timelog/{timelogid}:
    get:
      operationId: timelog.read_row_detail
      tags:
        - Timelog
      summary: Read Timelog row with Detail
      description: Read a Timelog row with task and project names
      parameters:
        - name: timelogid
          in: path
          description: ID of a Timelog row
          type: integer
          required: True
      responses:
        200:
          description: Successfully read timelog row
          schema:
            type: object
            properties: 
              task_name:
                type: string
                description: Name of task assigned to timelog row
              project_name:
                type: string
                description: Name of project assigned to timelog row
              start:
                type: string
                description: UTC timestamp when row timing started
              timelogid:
                type: string
                description: ID of the Timelog row
              userid:
                type: string
                description: ID of the user assigned to the row
    put:
      operationId: timelog.stop_row
      tags:
        - Timelog
      summary: Update a timelog row
      description: Update the data for the Timelog row at the ID provided
      parameters:
        - name: timelogid
          in: path
          description: ID of the timelog row to update
          type: integer
          required: True
        - name: timelog
          in: body
          description: Timelog row data to apply as Update to the ID provided
          required: True
          schema:
            type: object
            properties:
              timelogid:
                type: string
                description: ID of the timelog row to update
              userid:
                type: string
                description: ID of the user to which the rows belong
              taskid:
                type: string
                description: ID of the task tracked by the row
              projectid:
                type: string
                description: ID of the project tracked by the row
              noteid:
                type: string
                description: ID of the note tracked by the row
              start:
                type: string
                description: Timestamp of the start of timing the row
              stop:
                type: string
                description: Timestamp of the stop of timing the row or None if no stop time.
      responses:
        201:
          description: Successfully updated Timelog row at ID provided.